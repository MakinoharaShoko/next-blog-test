{"pageProps":{"post":"---\r\nlayout:     post\r\ntitle:      \"Maven\"\r\nintro:   \"\"\r\ndate:       2021-3-20 12:00:00\r\nauthor:     \"Makinohara\"\r\ncatalog: true\r\ntags:\r\n    - 工程开发\r\n  \r\n---\r\n\r\n\r\n\r\n\r\n\r\n# Maven基础内容\r\n\r\n## Maven构建\r\n\r\n清理、编译、测试、报告、打包、安装、（部署）\r\n\r\n编译命令：`mvn compile`\r\n\r\n换源 阿里源：\r\n\r\n```\r\n<mirror>\r\n        <id>nexus-aliyun</id>\r\n        <mirrorOf>central</mirrorOf>\r\n        <name>Nexus aliyun</name>\r\n        <url>http://maven.aliyun.com/nexus/content/groups/public</url>\r\n    </mirror>\r\n```\r\n\r\n仓库使用：\r\n\r\n本地仓库->私服->镜像->中央仓库\r\n\r\n常用命令：\r\n\r\n```\r\nmvn clean 清理\r\nmvn compile 编译主程序\r\n\tresources的文件会拷贝到target/classes/ 下\r\nmvn test-compile 编译测试程序\r\nmvn test 测试\r\nmvn package 打包主程序\r\nmvn install 安装主程序\r\nmvn deploy 部署主程序\r\n```\r\n\r\n\r\n\r\n## 项目对象模型pom\r\n\r\n```\r\nmodelVersion Maven模型版本\r\n坐标：\r\ngroupId 组织名称\r\nartifactId 项目名称\r\nversion 项目版本号 -SNAPSHOT不稳定版本\r\npackging 项目打包类型\r\ndependencies 依赖\r\nproperties 属性\r\nbuild 构建（一般涉及jdk版本等）\r\n```\r\n\r\n## Maven相关概念：\r\n\r\n生命周期：maven构建项目的过程：清理、编译、测试、报告、打包、安装、（部署）\r\n\r\nmaven命令：maven可以使用命令完成生命周期执行\r\n\r\nmaven插件：maven执行时完成功能的工具\r\n\r\n## 单元测试jUnit\r\n\r\n测试的类中的方法，方法是测试的基本单位（单元）。\r\n\r\nmaven可以借助单元测试测试类中方法。\r\n\r\n### 使用步骤\r\n\r\n1、加入Junit依赖\r\n\r\n```\r\n<dependency>\r\n<groupId>junit</groupId>\r\n<artifactId>junit</artifactId>\r\n<version>4.11</version>\r\n<scope>test</scope>\r\n</dependency>\r\n```\r\n\r\n2、创建测试类、测试程序（可以加入注解@Test）\r\n\r\n3、测试方法的限制：public；**没有返回值**；加@Test注解\r\n\r\n测试程序范例：\r\n\r\n```\r\npackage com.icsii.mavenlearn;\r\n\r\nimport org.junit.Assert;\r\nimport org.junit.Test;\r\n\r\npublic class TestDemo {\r\n    int add(int n1,int n2){\r\n        return n1+n2;\r\n    }\r\n    @Test //要在测试方法之前加上@Test\r\n    public void testAdd(){\r\n        TestDemo test = new TestDemo();\r\n        int res = test.add(10,20);\r\n        Assert.assertEquals(30,res);//期望值，实际值，相等正确，不等抛出异常\r\n    }\r\n}\r\n\r\n```\r\n\r\n## 打包\r\n\r\n将项目相关的资源和类等打包为压缩文件，存放才target内\r\n\r\n打包时不会包含测试文件\r\n\r\n## 安装\r\n\r\nmvn install 将项目打包后安装到仓库中\r\n\r\n## 部署\r\n\r\nmvn deploy 部署到远程私服仓库\r\n\r\n## 配置插件\r\n\r\n用于配置插件的一些设置\r\n\r\n```\r\n<build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-compiler-plugin</artifactId>\r\n                <version>3.8.1</version>\r\n                <configuration>\r\n                    <!-- 配置代码编译与运行的jdk版本-->\r\n                    <source>1.8</source>\r\n                    <target>1.8</target>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n```\r\n\r\n## 依赖、依赖范围\r\n\r\n```\r\n<dependency>\r\n<groupId>junit</groupId>\r\n<artifactId>junit</artifactId>\r\n<version>4.11</version>\r\n<!-- 依赖范围，指的是该依赖在项目中起作用的阶段 -->\r\n<!--test/compile/provided(提供者使用，打包后不依赖)/-->\r\n<scope>test</scope>\r\n</dependency>\r\n```\r\n\r\n## 属性设置、资源插件\r\n\r\n```\r\n<properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>\r\n        <java.version>16</java.version>\r\n        <!--jdk版本-->\r\n        <maven.compiler.source>16</maven.compiler.source>\r\n        <maven.compiler.target>16</maven.compiler.target>\r\n        <!--全局变量的使用-->\r\n        <spring.version>5.2.5</spring.version>\r\n        <!--使用：${spring.version}-->\r\n</properties>\r\n```\r\n\r\n```\r\n    <build>\r\n        <resources>\r\n            <resource>\r\n                <!--在以下目录中包含的文件种类，在编译时保留-->\r\n                <directory>src/main/java</directory>\r\n                <includes>\r\n                    <include>**/*.properties</include>\r\n                    <include>**/*.xml</include>\r\n                </includes>\r\n            </resource>\r\n        </resources>\r\n    </build>\r\n```\r\n\r\n"},"__N_SSG":true}