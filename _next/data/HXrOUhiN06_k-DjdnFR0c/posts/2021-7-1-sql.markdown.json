{"pageProps":{"post":"---\r\nlayout:     post\r\ntitle:      \"数据库复习\"\r\nintro:   \"\"\r\ndate:       2021-7-1 21:00:01\r\nauthor:     \"Makinohara\"\r\ncatalog: true\r\ntags:\r\n    - 计算机基础\r\n    \r\n---\r\n\r\n# SQL语句\r\n\r\n1、创建与删除\r\n\r\n```sql\r\n#数据库\r\ncreate database 数据库;\r\ndrop database 数据库;\r\n\r\n#表\r\ncreate table table1 (\r\n    学号 char(4) primary key,\r\n    姓名 char(20) not null\r\n)\r\n\r\n#索引\r\ncreate unique index idx on S(Sno DESC);#降序排列\r\n\r\n#视图\r\ncreate view view_name as\r\nselect * from s where city = 'New York';\r\ndrop view view_name;\r\n\r\n#角色\r\ncreate role role_name;\r\ngrant all privileges on S to role_name with grant option;\r\ndrop role role_name;\r\n\r\n#索引：\r\ncreate [unique|cluster(聚集)]index Index_name on S(Sno);\r\ndrop index index_name;\r\n```\r\n\r\n2、查询与修改\r\n\r\n```sql\r\n#基本查询\r\nselect Sno from S;\r\n\r\n#带别名\r\nselect Sno 学号 , Grade 成绩 , joinGroup 加入社团 from S;\r\n\r\n#带条件\r\nselect Sno from S where Sage > 18;\r\nselect Sno from S where Sage between 18 and 20;\r\nselect Sno from S where name not in ('Yukinoshita','Yui');\r\nselect Sno from S where name like 'Yukinoshita%';\r\nselect Sno from S where joinGroup is not null;\r\n\r\n#带排序\r\nselect Sno from S order by Grade DESC;\r\nselect top 10 Sno from S order by Grade DESC;#选择前10名的学生。\r\n\r\n#聚集\r\nselect avg(Grade) from S;\r\nselect count(*) from S;\r\nselect count(distinct joinGroup) from S;#相同内容只计数一次\r\nselect Sno from S group by Sno having count(distinct chooseClass) > 3;\r\n\r\n#连接\r\nselect S.* , SC.* from S,SC where S.Cno = SC.Cno;\r\nselect S.Sno , S.name , S.city , SPJ.qty from s , SPJ \r\nwhere S.Sno = SPJ.Sno and SPJ.Jno = 'J001' and SPJ.qty >300;\r\n\r\n#嵌套\r\nselect Sname from S where Sno in (select Sno from SC where Cno = '1001');\r\n\r\n\r\n```\r\n\r\n3、修改\r\n\r\n```sql\r\n#插入\r\ninsert into S values('114514','李田所','C','回家部','24');\r\nselect * into S from 下北泽高 where Sname like '李田所';#把信息复制到大学\r\n\r\n#修改\r\nupdate S set Grade = 'B' where Sno = 114514;\r\n\r\n#删除\r\ndelete from S where Sno = 114514;\r\n\r\n#批量\r\nupdate S set Sage = Sage +1 ;\r\n\r\n#带子查询\r\nupdate SPJ set QTY = QTY - 50 where JNO in( select JNO from J \r\n                                           where City = '天津');\r\n  \r\n#alter\r\nalter table tableName drop column columnName;#删除列\r\nalter table tableName add column Sbirth char(20);#添加列\r\nalter table tableName alter column columnname datatype# 改变数据类型\r\n\r\n#drop\r\ndrop table user index role ......;#drop一般删除数据结构或对象（包括属性列）\t\t，\r\n#而delete则倾向于删除对象中的元组。\r\n```\r\n\r\n\r\n\r\n4、视图\r\n\r\n```sql\r\n#创建\r\ncreate view S_BJ_VIEW as \r\nselect * from S where city = '北京' with check option;\r\n\r\n#删除\r\ndrop view ViewName;\r\n\r\n#查询\r\nselect Sno,Sname from S_BJ_VIEW where STAT > 'B';\r\nselect * from S_AVGQTY where QAVG >=300;\r\n\r\n#视图消解法：\r\n#定义的视图：\r\ncreate view S_AVGQTY(SNO,PNO,QAVG)\r\nas select SNO,PNO,AVG(QTY) from SPJ group by SNO,PNO;\r\n#查询语句：select * from S_AVGQTY where QAVG >=300;\r\nselect * from S_AVGQTY where QAVG >=300;\r\n#转换后：\r\nselect SNO,PNO,AVG(QTY) from SPJ group by SNO,PNO having AVG(QTY)>=300;\r\n\r\n#更新数据：\r\ninsert into S_BJ_VIEW value('S7','北京114514电子厂','B','北京');\r\n\r\n#删除：\r\ndelete from S_BJ_VIEW where SNAME = '北京114514电子厂';\r\n```\r\n\r\n5、安全性\r\n\r\n```sql\r\n#创建用户\r\ncreate user userName for login loginName with default_schema = schName;\r\ncreate login loginName with password = ..., default_database = DB_NAME;\r\n\r\n#创建角色\r\ncreate role RoleName; \r\ngrant RoleName to UserName with admin option;\r\n\r\n#权限管理\r\ngrant all privileges on S to Rolename/Username; #with grant option:可以传递权限\r\nrevoke all privileges on S from Rolename/Username;\r\ndeny update on S to Rolename/Username;#拒绝这一权限，使其加入其他有update权限组后仍然不能执行该操作。\r\n```\r\n\r\n6、完整性：\r\n\r\n```sql\r\n#主码定义：\r\ncreate table s(\r\n    Sno char(4) primary key;\r\n    ......\r\n)\r\n\r\ncreate table s(\r\n    ......\r\n    primary key (Sno);\r\n)\r\ncreate table s (\r\n\t......\r\n    primary key(Sno,Pno,Jno);\r\n)\r\n\r\n#参照完整性：\r\ncreate table s(\r\n\t......\r\n    foreign key (SNO) references s(SNO);\r\n)\r\n\r\n#其他完整性：\r\nnot null #非空\r\nunique # 唯一\r\ndefault 'defaultValue' #默认值\r\n\r\n#check约束\r\ncreate table s(\r\n\t......\r\n    STAT Char(2) check(STAT in ('A','B','C')),\r\n    ......\r\n)\r\n\r\n#constraint命令\r\ncreate table s (\r\n\t......\r\n    Sname char(20) constraint c1 not null # 此时c1这一完整性约束(constraint)的值为not null\r\n)\r\nalter table s drop constraint c1;\r\nalter table s add constraint c2 check(......);\r\n\r\n```\r\n\r\n# 数据库概念复习\r\n\r\n## 关系运算\r\n\r\n1、选择\r\n\r\n$$\\sigma(R)_F=\\{t|t \\in R\\wedge F(t) = true\\}$$\r\n\r\n2、投影\r\n\r\n$$\\Pi_A(R)=\\{t[A]|t \\in R\\}$$\r\n\r\n3、连接\r\n\r\n等值连接：选取笛卡尔级中等值的那些元组\r\n\r\n自然连接：在等值连接的基础上去掉重复的属性列\r\n\r\n4、除运算\r\n\r\nR÷S:\r\n\r\n用于选出以下内容：\r\n\r\n属性：在R不在S的属性\r\n\r\n元组：删去的属性对得上在R中的值\r\n\r\n比如：\r\n\r\nR:\r\n\r\nSno Jno\r\n\r\na      1\r\n\r\nb      2\r\n\r\nc      3\r\n\r\nS:\r\n\r\n1\r\n\r\n3\r\n\r\nR÷S:\r\n\r\nSno\r\n\r\na\r\n\r\nc\r\n\r\n**其他较为重要的运算：交并减、笛卡尔积**\r\n\r\n## 数据库安全\r\n\r\n### 自主：\r\n\r\n授予权限的类型：\r\n\r\n| 基本表、视图                                          | 属性列                                         |\r\n| ----------------------------------------------------- | ---------------------------------------------- |\r\n| select insert update delete references all privileges | select insert update references all privileges |\r\n\r\n一个简单的例子：\r\n\r\ngrant update(Sno),select on table SC to User1;\r\n\r\n对属性列：权限后面加括号，表明该权限生效的属性列\r\n\r\n可传递：with grant option;\r\n\r\n收回权限：同grant，但有需要注意的地方：\r\n\r\n最后加 cascade/restrict：是否级联操作或约束操作。\r\n\r\n角色：\r\n\r\n创建：create role rolename ;\r\n\r\n授予权限同用户\r\n\r\n将角色权限授予用户：grant Rolename to User;\r\n\r\n解除权限：revoke Rolename from User;\r\n\r\n撤销授权同用户\r\n\r\n### 强制：\r\n\r\n设定若干级别：\r\n\r\nTS>=S>=C>=P\r\n\r\n访问规则：\r\n\r\n主体许可证等级大于等于客体，可以读。\r\n\r\n主体许可证等级小于等于客体，可以写。\r\n\r\n第二条解释：高许可证主体没有办法写出一个更低等级的客体。\r\n\r\n视图：\r\n\r\ncreate view as(select......);\r\n\r\ngrant select on view to ......;\r\n\r\n## 完整性：\r\n\r\n实体完整性：\r\n\r\n```sql\r\ncreate table ...(\r\n    ......\r\n    Sname char(20) primary key;#在列级\r\n    \r\n    ......\r\n    primary key (Sname);#在表级\r\n    \r\n    primary key (Sname,Sno);#在表级，多列\r\n\r\n)\r\n```\r\n\r\n参照完整性：\r\n\r\n```sql\r\ncreate table S2(\r\n    ......\r\n    foreign key (Sno) references S(Sno)#表级定义参照完整性\r\n    on delete cascade on update cascade,#级联删除、更新\r\n)\r\n```\r\n\r\n约束语句：\r\n\r\n```sql\r\ncreate table R1(\r\n    Sno char(20) not null,#非空\r\n    ...... unique,#列值唯一\r\n    ......check( ......in(......集合))\r\n    \r\n    check (Ssex = 'female'or Sname not like 'Ms.%');\r\n    \r\n    \r\n    #constraint\r\n    Sno char(20) constraint C1 check(......);#形成一个名为C1的约束条件\r\n    \r\n    ......\r\n    constraint C2 check(......)#在表级定义约束条件\r\n)\r\n\r\nalter table R1 drop constraint C1;#删除约束条件\r\nalter table R1 create constraint c3 check(......);#创建约束条件，表级。\r\n```\r\n\r\n### 断言\r\n\r\n在操作时，使断言不为真的操作拒绝执行。\r\n\r\n创建断言：\r\n\r\n```sql\r\ncreate assertion assertion_name check (......);\r\n\r\ncreate assertion A1 check(60>=select count(*) from SC where C = 'Cource1');\r\ncreate assertion A2 check(60>=all(select count(*) from SC group by ...));\r\n```\r\n\r\n### 触发器：\r\n\r\n触发器用于在某条件由于操作成立时触发其他操作。\r\n\r\n```sql\r\ncreate trigger trigger_name before/after update on SC\r\nreferencing new/old row as variable#触发器内设变量：原值和新值\r\nfor each row / statement#每行触发还是每条语句触发\r\nwhen(......)#触发条件，比如new.grade>=old.grade\r\ninsert into Table_name(......) values (......)\r\n\r\ndrop trigger trigger_name;#删除（删除对象用drop）\r\n```\r\n\r\n## 规范化\r\n\r\n1NF：不可分割\r\n\r\n2NF：属性由一码确定\r\n\r\n3NF：没有不完全函数依赖，没有传递函数依赖\r\n\r\nBCNF：每个决定因素都有码\r\n\r\n4NF：不存在非平凡、非函数依赖的多值依赖\r\n\r\n规范化的实质：概念的单一化\r\n\r\n## 数据库设计\r\n\r\n### E-R图\r\n\r\n联系：菱形，两侧写是1-1、1-n还是n-1的依赖。\r\n\r\n属性：圆形，属性不能有属性（不可再分）\r\n\r\n实体：矩形\r\n\r\n### 实体描述：\r\n\r\n实体{实体的主码（下划线），属性1，属性2，属性3}\r\n\r\n## 数据库的故障恢复、数据库的并发控制：\r\n\r\n### 事务\r\n\r\n事务：一个数据库操作序列，具有ACID特性，即原子性、一致性、隔离性、持续性（永久性）\r\n\r\n### 数据库的日志文件\r\n\r\n日志文件记录：\r\n\r\n事务标识、操作类型、操作对象、操作前值、操作后值。\r\n\r\n### 故障处理\r\n\r\n事务故障：反向扫描日志文件，撤销已经完成的操作\r\n\r\n系统故障：视事务完成情况选择是撤销还是重做，撤销：根据日志写更新前值；重做：根据日志写更新后值。\r\n\r\n介质故障：从恢复介质重装数据，然后重做已经完成的事务。\r\n\r\n### 并发控制\r\n\r\n#### 封锁\r\n\r\nX锁（写锁）：上X锁后，其他事务不能读写。\r\n\r\nS锁（读锁）：上S锁后，其他事务可以再上S锁，可以读，但是不能写。\r\n\r\n##### 封锁协议\r\n\r\n一级封锁协议：事务在修改数据前必须加X锁，直至事务结束释放。\r\n\r\n二级封锁协议：在一级的基础上，事务读要上S锁，读完释放。\r\n\r\n三级封锁协议：在一级的基础上，事务读要上S锁，且事务结束时才释放（解决了不可重复读问题）。\r\n\r\n### 活锁与死锁\r\n\r\n活锁：事务由于等待其他事务结束无法完成（解决：先来先服务）。\r\n\r\n死锁：事务间循环等待导致数个事务不能结束（解决：采取措施避免或每隔一段时间诊断死锁并清除）。\r\n\r\n### 意向锁（Intention Lock）\r\n\r\nIS锁：对一个对象加IS锁，意味着拟对其后裔结点加S锁。如果要对某个元组加S锁，必须先给关系加IS锁。\r\n\r\nIX锁：类似IS锁\r\n\r\nSIX锁：对这个对象加S锁，然后加IX锁，代表这个事务希望读这个对象，并可能更新个别元组。\r\n"},"__N_SSG":true}