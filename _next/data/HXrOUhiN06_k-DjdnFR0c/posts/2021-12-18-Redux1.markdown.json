{"pageProps":{"post":"---\r\nlayout:     post\r\ntitle:      Redux初体验\r\nintro:   \"\"\r\ndate:       2021-12-18 12:00:01\r\nauthor:     \"Makinohara\"\r\ncatalog: true\r\ntags:\r\n    - 工程开发\r\n    \r\n---\r\n\r\n# Redux初体验\r\n\r\n## 概念图\r\n\r\n![redux](/img/redux.jpg)\r\n\r\n## 1、创建Store（类似于全局变量存储仓库）\r\n\r\n```js\r\nimport {createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\n//window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() 是为了在DevTools调试，可以不加\r\nconst store = createStore(reducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport default store;\r\n```\r\n\r\n## 2、创建Reducer（相当于全局变量管理器）\r\n\r\n```js\r\nconst defaultStore = {\r\n    inputValue:'Write something',\r\n    list:[\r\n        '搞114514',\r\n        '坐下北泽JR'\r\n    ]\r\n};\r\n\r\nexport default (state = defaultStore,action)=>{\r\n    console.log(state);\r\n    console.log(action);\r\n    if(action.type === 'value/changeInput'){\r\n        let newState = JSON.parse(JSON.stringify(state));\r\n        newState.inputValue = action.payload;\r\n        return newState;\r\n    }\r\n    return state;\r\n}\r\n```\r\n\r\n## 3、在组件里调用仓库内容\r\n\r\n```jsx\r\nimport './App.css';\r\nimport store from \"./store\";\r\nimport {useState} from \"react\";\r\nimport { Input } from 'antd';\r\nimport 'antd/dist/antd.css';\r\n\r\nfunction App() {\r\n    //初始化HOOK：取出store里的state\r\n    const [appData,setAppData] = useState(store.getState());\r\n    //当store变动时，调用回调函数（这里是setAppData）\r\n    store.subscribe(()=>{setAppData(store.getState())});\r\n    let list = appData.list;\r\n    let inputValue = appData.inputValue;\r\n    let page = [];\r\n    console.log(store.getState())\r\n    for (let i = 0; i < list.length; i++) {\r\n        let temp = <div>{list[i]}</div>\r\n        page.push(temp);\r\n    }\r\n\r\n    const changeInputValue = (e)=>{\r\n        // 创建action\r\n        const action = {\r\n            type:'value/changeInput',\r\n            payload:e.target.value\r\n        }\r\n        // 使action生效（也就是传给reducer，判断后更新store中的state）\r\n        store.dispatch(action);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Input placeholder={\"Write Something\"} onChange={changeInputValue}/>\r\n            {page}\r\n            <div>\r\n                {inputValue}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n```\r\n\r\n如此一来，就实现了类似于全局变量管理的模式（你可以为每一个需要管理的全局状态创建store）\r\n\r\n## 将Store和Reducer写到一起\r\n\r\n```js\r\nimport {createStore} from \"redux\";\r\n\r\n//初始化\r\nconst defaultStore = {\r\n    inputValue:'Write something',\r\n    list:[\r\n        '搞114514',\r\n        '坐下北泽JR'\r\n    ]\r\n};\r\n\r\nconst reducer =  (state = defaultStore,action)=>{\r\n    //判断action的类型，改变state的指定属性\r\n    if(action.type === 'value/changeInput'){\r\n        let newState = JSON.parse(JSON.stringify(state));\r\n        newState.inputValue = action.payload;\r\n        return newState;\r\n    }\r\n    return state;\r\n}\r\n\r\nconst appStore = createStore(reducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport default appStore;\r\n```\r\n\r\n**对应的App代码**\r\n\r\n```jsx\r\nimport './App.css';\r\nimport appStore from \"./store/appReducer\";\r\nimport {useState} from \"react\";\r\nimport { Input } from 'antd';\r\nimport 'antd/dist/antd.css';\r\n\r\nfunction App() {\r\n    //初始化HOOK：取出store里的state\r\n    const [appData,setAppData] = useState(appStore.getState());\r\n    //当store变动时，调用回调函数（这里是setAppData）\r\n    appStore.subscribe(()=>{setAppData(appStore.getState())});\r\n    let list = appData.list;\r\n    let inputValue = appData.inputValue;\r\n    let page = [];\r\n    console.log(appStore.getState())\r\n    for (let i = 0; i < list.length; i++) {\r\n        let temp = <div>{list[i]}</div>\r\n        page.push(temp);\r\n    }\r\n\r\n    const changeInputValue = (e)=>{\r\n        // 创建action\r\n        const action = {\r\n            type:'value/changeInput',\r\n            payload:e.target.value\r\n        }\r\n        // 使action生效（也就是传给reducer，判断后更新store中的state）\r\n        appStore.dispatch(action);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Input placeholder={\"Write Something\"} onChange={changeInputValue}/>\r\n            {page}\r\n            <div>\r\n                {inputValue}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n```\r\n\r\n\r\n\r\n## Action Creator\r\n\r\n添加了 Action Creator 的处理方法：\r\n\r\n```js\r\n//初始化\r\nconst defaultStore ='Write something';\r\n\r\nconst inputValue =  (state = defaultStore, action)=>{\r\n    //判断action的类型，改变state的指定属性\r\n    if(action.type === 'value/changeInput'){\r\n        let newState = JSON.parse(JSON.stringify(state));\r\n        newState = action.payload;\r\n        return newState;\r\n    }\r\n    return state;\r\n}\r\n\r\nexport class inputValueAction{\r\n    static changeInput = (input) =>{\r\n        return {\r\n            type:'value/changeInput',\r\n            payload:input\r\n        }\r\n    }\r\n}\r\n\r\nexport default inputValue;\r\n```\r\n\r\n将所有相关与某个要发送数据的 action creator 放到一个类中，方便调用\r\n"},"__N_SSG":true}