{"pageProps":{"post":"---\r\nlayout:     post\r\ntitle:      \"JavaScript高级程序设计\"\r\nintro:   \"\"\r\ndate:       2021-11-2 08:00:00\r\nauthor:     \"Makinohara\"\r\nfeatured_image: http://msfasr.com/img/py.jfif\r\ncatalog: true\r\ntags:\r\n    - 编程语言\r\n---\r\n\r\n> 为系统学习 JavaScript ，重写有关 JavaScript 的笔记，使用教材《JavaScript高级程序设计》第四版。\r\n\r\n# 新笔记：直接使用代码描述笔记\r\n\r\n注意：因此本博文不再更新\r\n\r\nhttps://github.com/MakinoharaShoko/Learning-Code/tree/main/JS\r\n\r\n# 基础概念\r\n\r\n## 1、DOM & BOM\r\n\r\nDOM通过创建表示文档的树，让开发者可以随心所欲地控制网页的内容和结构。使用DOM API， 可以轻松地删除、添加、替换、修改节点。\r\n\r\n总体来说，BOM 主要针对浏览器窗口和子窗口（frame），不过人们通常会把任何特定于浏览器的 扩展都归在BOM的范畴内。比如，下面就是这样一些扩展：\r\n\r\n 弹出新浏览器窗口的能力；\r\n\r\n 移动、缩放和关闭浏览器窗口的能力；\r\n\r\n navigator 对象，提供关于浏览器的详尽信息；\r\n location 对象，提供浏览器加载页面的详尽信息；\r\n\r\n screen 对象，提供关于用户屏幕分辨率的详尽信息；\r\n\r\n performance 对象，提供浏览器内存占用、导航行为和时间统计的详尽信息；\r\n\r\n 对 cookie的支持；\r\n 其他自定义对象，如 XMLHttpRequest 和 IE的 ActiveXObject。\r\n\r\n## 2、加载方式\r\n\r\n### 1、行内\r\n\r\n```\r\n<script> \r\nfunction sayHi() { \r\n\tconsole.log(\"Hi!\");\r\n}\r\n</script>\r\n```\r\n\r\n### 2、外部文件\r\n\r\n```\r\n<script src=\"example.js\"></script>\r\n```\r\n\r\n### 3、加载位置\r\n\r\n推荐加载在 body 内容的最后，这样就会在渲染界面后加载JavaScript\r\n\r\n```\r\n<!DOCTYPE html> \r\n<html>\r\n\t<head>\r\n\t\t<title>Example HTML Page</title> \r\n\t</head> \r\n\t<body> \r\n\t<!-- 这里是页面内容 -->\r\n\t<script src=\"example1.js\"></script> \r\n\t<script src=\"example2.js\"></script> \r\n\t</body>\r\n</html>\r\n```\r\n\r\n推迟到解析到结束标签 \\</html> 执行（只对外部脚本文件才有效）：\r\n\r\n```\r\n<script defer src=\"example1.js\"></script>\r\n```\r\n\r\n# 语言基础\r\n\r\n### 变量声明提升\r\n\r\nvar 提升，let不提升\r\n\r\n```\r\nconsole.log(name);//undefined\r\nvar name = 'Matt';\r\n\r\nconsole.log(age);//ReferenceError,暂时性死区\r\nlet age = 26;\r\n```\r\n\r\nlet：声明范围是块作用域，所以不会造成循环定义的迭代变量渗透到外部。\r\n\r\nconst声明：限制不能修改其值或引用的对象，但是可以修改该对象的内部属性。\r\n\r\n**尽可能使用let、const，避免使用var，const优先**\r\n\r\n### 变量类型\r\n\r\n```\r\nUndefined\r\nNull//typeof Null ==='object'\r\nBoolean\r\nNumber\r\nString\r\nSymbol\r\n(Object)\r\n```\r\n\r\nundefined 是一个特殊值，在if判断为假\r\n\r\nnull：可以看做是空对象指针\r\n\r\n### 数值\r\n\r\n特殊：NaN:not a number\r\n\r\n#### 转换函数：\r\n\r\n```\r\nNumber()\r\nparseInt()\r\nparseFloat()\r\n```\r\n\r\n### 字符串\r\n\r\n字符串的特点：不可变，如果要修改只能销毁原有的字符串。\r\n\r\n转换函数：\r\n\r\n```\r\ntoString()\r\nString()\r\nString(null) === 'null'\r\nString(undefined) === 'undefined'\r\n```\r\n\r\n#### 模板字面量\r\n\r\n模板字面量可用于字符串插值：\r\n\r\n```\r\nlet value1 = 233;\r\nlet value2 = 'sec'\r\nlet str1 = `now is ${value1} ${value2}.`\r\n```\r\n\r\n模板字面量可以跨行定义字符串\r\n\r\n```\r\nlet str2 = `the\r\nKamome's humble abode`\r\n```\r\n\r\n原始字符串：\r\n\r\n```\r\nString.raw`\\u00a9`\r\n```\r\n\r\n### Symbol\r\n\r\nTODO:写关于symbol的笔记\r\n\r\n### Object\r\n\r\nObject 的属性和方法\r\n\r\n```\r\nconstructor:创建\r\nhasOwnProperty(propertyName):判断当前对象是否存在给定属性\r\nisPrototypeOf:\r\npropertyIsEnumerable(propertyName):判断给定的属性是否可用\r\ntoLocaleString():返回对象的字符串表示（反映本地化执行环境）\r\ntoString:返回对象的字符串表示\r\nvalueOf():返回对应的字符串\r\n```\r\n\r\n### 算符\r\n\r\n一元算符\r\n\r\n```\r\n//一元运算符\r\nlet str1 = '123';\r\nstr1 = +str1;\r\nconsole.log(typeof str1);//number\r\n```\r\n\r\n# 异步编程\r\n\r\n## Promise\r\n\r\n### Promise的基本使用\r\n\r\n```\r\nlet myFirstPromise = new Promise(function(resolve, reject){\r\n    //当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)\r\n    //在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.\r\n    setTimeout(function(){\r\n        resolve(\"成功!\"); //代码正常执行！\r\n    }, 250);\r\n});\r\n```\r\n\r\n### 函数返回Promise\r\n\r\n```\r\nfunction getUserInfo() {\r\n\t//获取个人信息\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tdbo.collection('users').find({ eid: userEID }).toArray((err, result) => {\r\n\t\t\tif (err) throw err;\r\n            returnMessage['userInfo'] = result;\r\n            resolve();\r\n        })\r\n    })\r\n}\r\n```\r\n\r\n### Promise.all的使用\r\n\r\n```\r\n//执行查询\r\nPromise.all([getUserInfo(), getMessage(), getFriendReq(), getFriendList()]).then(() => { closeAndSend() })\r\n```\r\n\r\n# 函数\r\n\r\n### 函数的几种描述：\r\n\r\n```\r\nfunction func1(){\r\n\treturn 1;\r\n}\r\n\r\nlet func2 = function(){\r\n\treturn 1;\r\n}\r\n\r\nlet func3 = () => {\r\n\treturn 1;\r\n}\r\n\r\n//立即执行的函数\r\n(()=>1)();\r\n```\r\n\r\n箭头函数(Lambda)\r\n\r\n```\r\n(param1, param2, …, paramN) => { statements }\r\n(param1, param2, …, paramN) => expression\r\n//相当于：(param1, param2, …, paramN) =>{ return expression; }\r\n\r\n// 当只有一个参数时，圆括号是可选的：\r\n(singleParam) => { statements }\r\nsingleParam => { statements }\r\n\r\n// 没有参数的函数应该写成一对圆括号。\r\n() => { statements }\r\n```\r\n\r\n"},"__N_SSG":true}