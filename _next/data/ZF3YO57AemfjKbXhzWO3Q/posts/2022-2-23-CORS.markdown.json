{"pageProps":{"post":"---\r\nlayout:     post\r\ntitle:      有关跨域问题的知识点概述\r\nintro:   \"\"\r\ndate:       2022-2-23 23:00:00\r\nauthor:     \"Makinohara\"\r\ncatalog: true\r\ntags:\r\n    - 工程开发\r\n---\r\n\r\n# 同源定义\r\n\r\n协议、域名、端口号相同。\r\n\r\n# 跨域的几种方式\r\n\r\n## JSONP\r\n\r\n#### 客户端\r\n\r\n1. 定义获取数据后调用的回调函数\r\n2. 动态生成对服务端JS进行引用的代码\r\n   - 设置`url`为提供`jsonp`服务的`url`地址，并在该`url`中设置相关`callback`参数\r\n   - 创建`script`标签，并设置其`src`属性\r\n   - 把`script`标签加入`head`，此时调用开始。\r\n\r\n#### 服务端\r\n\r\n将客户端发送的`callback`参数作为函数名来包裹住`JSON`数据，返回数据至客户端。\r\n\r\n### 示例\r\n\r\n#### 客户端\r\n\r\n```js\r\n// 得到航班信息查询结果后的回调函数\r\nvar flightHandler = function(data){\r\n\talert('你查询的航班结果是：票价 ' + data.price + ' 元，' + '余票 ' + data.tickets + ' 张。');\r\n};\r\n// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）\r\nvar url = \"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&callback=flightHandler\";\r\n// 创建script标签，设置其属性\r\nvar script = document.createElement('script');\r\nscript.setAttribute('src', url);\r\n// 把script标签加入head，此时调用开始\r\ndocument.getElementsByTagName('head')[0].appendChild(script); \r\n```\r\n\r\n#### 服务端\r\n\r\n```js\r\nflightHandler({\r\n  \"code\": \"CA1998\",\r\n  \"price\": 1780,\r\n  \"tickets\": 5\r\n});\r\n```\r\n\r\n## CORS\r\n\r\n主要依托于服务端实现\r\n\r\n服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。\r\n\r\n## postMessage+iframe\r\n\r\n```html\r\n// a.html\r\n<iframe src=\"http://localhost:4000/b.html\" frameborder=\"0\" id=\"frame\" onload=\"load()\"></iframe>\r\n//等它加载完触发一个事件\r\n//内嵌在http://localhost:3000/a.html\r\n<script>\r\nfunction load() {\r\n    let frame = document.getElementById('frame')\r\n    frame.contentWindow.postMessage('我爱你', 'http://localhost:4000') //发送数据\r\n    window.onmessage = function(e) { //接受返回数据\r\n        console.log(e.data) //我不爱你\r\n    }\r\n}\r\n</script>\r\n\r\n```\r\n\r\n```js\r\n// b.html\r\n  window.onmessage = function(e) {\r\n    console.log(e.data) //我爱你\r\n    e.source.postMessage('我不爱你', e.origin)\r\n }\r\n\r\n```\r\n\r\n## WebSocket\r\n\r\n原理：WebSocket 没有同源策略。\r\n\r\n### 使用 Socket.io\r\n\r\n略，参见 Socket.io 笔记\r\n\r\n## 代理\r\n\r\n原理：服务端没有同源策略\r\n\r\n### 代理服务器\r\n\r\n- 接受客户端请求 。\r\n\r\n- 将请求 转发给服务器。\r\n\r\n- 拿到服务器 响应 数据。\r\n\r\n- 将 响应 转发给客户端。\r\n\r\n#### 实现方式\r\n\r\nNode.Js 中间件代理\r\n\r\nNginx 反向代理\r\n\r\n## iframe\r\n\r\n### 通过 window.name\r\n\r\nwindow.name 最长可以保存 2MB 的数据。\r\n\r\n### 通过location.hash\r\n\r\n### 通过document.domain\r\n\r\n只有在同源的情况下，父窗口和子窗口才能通信\r\n\r\n实现条件：两个窗口一级域名相同，只是二级域名不同\r\n\r\n实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。\r\n"},"__N_SSG":true}