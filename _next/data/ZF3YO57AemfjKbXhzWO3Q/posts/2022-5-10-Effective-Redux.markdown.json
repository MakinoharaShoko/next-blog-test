{"pageProps":{"post":"---\r\nlayout:     post\r\ntitle:      Effective React Redux\r\nintro:   \"\"\r\ndate:       2022-5-10 17:00:00\r\nauthor:     \"Mahiru\"\r\ncatalog: true\r\ntags:\r\n    - 工程开发\r\n---\r\n\r\n## 高效使用 React + Redux\r\n\r\n### 使用 redux-toolkit 完成 reducer 的创建和 action 的创建\r\n\r\n```typescript\r\nimport {createSlice} from \"@reduxjs/toolkit\";\r\n\r\n// 初始状态\r\nconst initialState = {\r\n  count: 0\r\n}\r\n\r\n// 使用 createSlice 代替手动编写 reducer 和 action\r\nconst counterSlice = createSlice({\r\n  // reducer 的名称\r\n  name: 'counter',\r\n  // 初始状态\r\n  initialState,\r\n  // reducer，由于使用了 createSlice，因此我们可以用修改可变值的方法来得到新状态。\r\n  // 这是因为 createSlice 使用了 Immer 库来保证直接修改状态后得到的是一个全新的状态。\r\n  reducers: {\r\n    increment: state => {\r\n      state.count++;\r\n    }\r\n  }\r\n});\r\n\r\n// 导出 actions\r\nexport const {increment} = counterSlice.actions;\r\n// 导出 reducer\r\nexport default counterSlice.reducer;\r\n\r\n```\r\n\r\n### 使用 configureStore 来创建 store\r\n\r\n```typescript\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport counterReducer from \"./counterReducer\";\r\n\r\n// 只需要传入一个对象，包括必要的属性（比如 reducer），就可以创建store 并自动配置 Redux DevTools\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  }\r\n})\r\n\r\n// 在 TS 中的类型声明\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\n```\r\n\r\n### 使用 react-redux 来使组件获得状态\r\n\r\n#### 使用 Provider 向组件提供状态\r\n\r\n```tsx\r\nimport './App.css'\r\nimport {Provider} from \"react-redux\";\r\nimport {TestReducer} from \"./components/testReducer\";\r\nimport {store} from './store';\r\nimport React from 'react';\r\n\r\nfunction App() {\r\n  // 使用 Provider 来提供 store，这样子组件都可以获取到状态\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"App\">\r\n        <TestReducer/>\r\n      </div>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\n```\r\n\r\n#### 使用 useSelector 来在组件中获取状态，使用 useDispatch 来在组件中发送 action\r\n\r\n```tsx\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store\";\r\nimport {increment} from \"../store/counterReducer\";\r\n\r\n\r\nexport const TestReducer = () => {\r\n  // 使用 useSelector 来在 state 中找到当前组件需要使用的状态\r\n  const count = useSelector((state: RootState) => state.counter.count);\r\n  // 使用 useDispatch 来获得向 store 的 dispatch 函数\r\n  const dispatch = useDispatch();\r\n  return <div>\r\n    <h1>TestReducer</h1>\r\n    <p>count: {count}</p>\r\n    {/*increase 是导出的 action creator，返回一个 action 对象*/}\r\n    {/*调用 dispatch 方法传入 action 对象就可以发送 action 了*/}\r\n    <button onClick={() => dispatch(increment())}>increment\r\n    </button>\r\n  </div>;\r\n}\r\n\r\n```\r\n\r\n"},"__N_SSG":true}