{"pageProps":{"post":"---\r\nlayout:     post\r\ntitle:      机器学习\r\nintro:   \"\"\r\ndate:       2021-8-3 12:00:01\r\nauthor:     \"Makinohara\"\r\ncatalog: true\r\ntags:\r\n    - 科研应用\r\n    \r\n---\r\n\r\n# 入门\r\n\r\n机器学习的基本方法：任务T在得到经验E后提高性能度量P\r\n\r\n## 监督学习\r\n\r\n监督学习：找正确答案\r\n\r\n1、回归问题：找函数，预测连续值\r\n\r\n2、分类问题：预测离散值\r\n\r\n## 无监督学习\r\n\r\n无监督学习：自己找数据的结构和规律（并不提前给出正确答案）\r\n\r\n聚类算法：将不同的内容整合为几个集合\r\n\r\n## 神经网络\r\n\r\n神经网络是一个可以学习模式的函数集合。\r\n\r\n## 卷积\r\n\r\n通过某种方式处理图像，使之呈现出某种特征\r\n\r\n## 池化\r\n\r\n处理图像的一种方式，取某些像素的最大、平均值或其他特征值\r\n\r\n# TensorFlow\r\n\r\n### 实例1：图像分类\r\n\r\n```python\r\nimport tensorflow as tf\r\nfrom tensorflow import keras\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n#回调，当准确度达到80%时停止训练\r\nclass callBack(tf.keras.callbacks.Callback):\r\n    def on_epoch_end(self, epoch, logs={}):\r\n        if(logs.get('loss')<0.2):\r\n            print('\\nReached 80%')\r\n            self.model.stop_training = True\r\ncb1 = callBack()\r\n\r\n#导入Fashion数据集\r\nmnist = tf.keras.datasets.fashion_mnist\r\n(training_images, training_labels), (test_images, test_labels) = mnist.load_data()\r\n\r\n#这里的没什么用\r\nplt.imshow(training_images[0])\r\nprint(training_images[0])\r\nprint((training_labels[0]))\r\n\r\n#将像素0-255表示转为更容易处理的0-1表示\r\ntraining_images = training_images/255\r\ntest_images = test_images/255\r\n\r\n#升维，以便卷积\r\ntraining_images = np.expand_dims(training_images, axis=3)\r\ntest_images = np.expand_dims(test_images, axis=3)\r\n\r\n#神经网络\r\nmodel = tf.keras.models.Sequential([\r\n    tf.keras.layers.Conv2D(64,(3,3),activation='relu',input_shape=(28,28,1)),#卷积1\r\n    tf.keras.layers.MaxPooling2D(2,2),#最大池化\r\n    tf.keras.layers.Conv2D(64,(3,3),activation='relu'),#卷积2\r\n    tf.keras.layers.MaxPooling2D(2,2),#最大池化\r\n    tf.keras.layers.Flatten(),\r\n    tf.keras.layers.Dense(256,activation=tf.nn.relu),#全连接层\r\n    tf.keras.layers.Dense(10,activation=tf.nn.softmax)]\r\n)\r\n\r\n#训练\r\nmodel.compile(optimizer=tf.optimizers.Adam(),\r\n              loss='sparse_categorical_crossentropy')\r\nmodel.summary()\r\nmodel.fit(training_images,training_labels,epochs=15,\r\n          callbacks=[cb1]\r\n          )\r\n\r\n#评估结果\r\nmodel.evaluate(test_images,test_labels)\r\n```\r\n\r\n"},"__N_SSG":true}